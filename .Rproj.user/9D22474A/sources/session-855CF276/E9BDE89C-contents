

#'
#'
#'
#' # The causalPAFplot function below has response_model_mediators, response_model_exposure and
#' # model_listArg pre-fit. This allows the user to apply customised regressions instead of the
#' # default setting above, where the causalPAF R package fitted these regressions automatically
#' # based on the causalDAG defined in in_outArg.
#'
#' # Libraries must be loaded if fitting models outside of the causalPAF R package.
#' library(MASS)
#' library(splines)
#'
#' # Next we fit the, response_model_mediators and response_model_exposure, models outside of
#' # the causalPAF package
#' # as an input into the package.
#'
#' # It is important that response_vs_mediator is a list and it must be the same length as the
#' # parameter, mediator, i.e. length( response_vs_mediator ) == length( mediator). In this
#' # example, mediator=c("subhtn","apob_apoa","whr") so length( mediator) is 3, so we create a
#' # list with three models for "subhtn","apob_apoa" and "whr" respectively in that order.
#' # Note in this example, the model is the same for each mediator, but it must still be input
#' # 3 times within the list as follows:
#' response_vs_mediator <-  list( glm("case ~ regionnn7*ns(eage,df=5)+esex*ns(eage,df=5) +  subeduc+
#'                                     moteduc+ fatduc+phys+ ahei3tert+ nevfcur+ alcohfreqwk+
#'                                     global_stress2+ subhtn +
#'                                    ns(apob_apoa, knots = quantile(apob_apoa,c(.25,0.5,0.75)),
#'                                    Boundary.knots = quantile(apob_apoa,c(.001,0.95)))+
#'                                    ns(whr,df=5)",data = stroke_reduced,family='binomial',
#'                                    w = stroke_reduced$weights ), # "subhtn" mediator model
#'                                glm("case ~ regionnn7*ns(eage,df=5)+esex*ns(eage,df=5) +  subeduc+
#'                                    moteduc+ fatduc+phys+ ahei3tert+
#'                                    nevfcur+ alcohfreqwk+ global_stress2+ subhtn + ns(apob_apoa,
#'                                    knots = quantile(apob_apoa,c(.25,0.5,0.75)),
#'                                    Boundary.knots = quantile(apob_apoa,c(.001,0.95)))+
#'                                    ns(whr,df=5)",data = stroke_reduced,family='binomial',
#'                                    w = stroke_reduced$weights ), # "apob_apoa" mediator model
#'                               glm("case ~ regionnn7*ns(eage,df=5)+esex*ns(eage,df=5) +
#'                                    subeduc+ moteduc+ fatduc+ phys+ahei3tert+ nevfcur+ alcohfreqwk+
#'                                    global_stress2+ subhtn + ns(apob_apoa,
#'                                   knots = quantile(apob_apoa,c(.25,0.5,0.75)),
#'                                   Boundary.knots = quantile(apob_apoa,c(.001,0.95)))+ns(whr,df=5)",
#'                               data = stroke_reduced,family='binomial',w = stroke_reduced$weights )
#'                                   ) # "whr" mediator model
#'
#' # Next we fit a customised response_model_exposure model rather than allowing the package fit it
#' # automatically as shown previously. This must be a list of length 1.
#' response_vs_phys <- list( glm("case ~ regionnn7*ns(eage,df=5)+esex*ns(eage,df=5) +subeduc+ moteduc+
#'                               fatduc+ phys+ahei3tert+ nevfcur+ alcohfreqwk+ global_stress2",
#'                               data = stroke_reduced,family='binomial',w= stroke_reduced$weights) )
#'
#' # model_listArg is a list of models fitted for each of the variables in in_out$outlist based on its
#' # parents given in in_out$inlist. By default this is set to an empty list. Alternatively the user can
#' # supply their custom fitted, model_listpop, which should be consistent with the causal structure.
#' # model_listArg is defined earlier in this example.
#' # Note it is important that model_listArg is defined as a list and in the same order and length as
#' # the variables defined in in_outArg[[2]].
#'
#' model_listArgFit <- list(glm(formula = phys ~ subeduc + regionnn7 * ns(eage, df = 5) +
#'                              esex * ns(eage, df = 5) +moteduc + fatduc,
#'                              family = "binomial", data = stroke_reduced, weights = weights
#'                             ), # model 1 phys
#'                          polr(formula = ahei3tert ~ subeduc + regionnn7 * ns(eage, df = 5) +
#'                               esex * ns(eage, df = 5) +moteduc + fatduc,
#'                               data = stroke_reduced, weights = weights), # model 2 ahei3tert
#'                          glm(formula = nevfcur ~ subeduc + regionnn7 * ns(eage, df = 5) +
#'                              esex * ns(eage, df = 5) +moteduc + fatduc,
#'                              family = "binomial", data = stroke_reduced, weights = weights
#'                              ), # model 3 nevfcur
#'                          polr(formula = alcohfreqwk ~ subeduc + regionnn7 * ns(eage, df = 5) +
#'                               esex * ns(eage, df = 5) +moteduc + fatduc, data = stroke_reduced,
#'                               weights = weights), # model 4 alcohfreqwk
#'                          glm(formula = global_stress2 ~ subeduc + regionnn7 * ns(eage,df = 5) +
#'                              esex * ns(eage, df = 5) + moteduc + fatduc,
#'                              family = "binomial",data = stroke_reduced, weights = weights
#'                              ), # model 5 global_stress2
#'                          glm(formula = subhtn ~ subeduc + regionnn7 * ns(eage, df = 5) +
#'                              esex * ns(eage, df = 5) + moteduc + fatduc + phys + ahei3tert +
#'                              nevfcur + alcohfreqwk + global_stress2,family = "binomial",
#'                              data = stroke_reduced, weights = weights), # model 6 subhtn
#'                          lm(formula = apob_apoa ~ subeduc + regionnn7 * ns(eage, df = 5) +
#'                             esex * ns(eage, df = 5) + moteduc + fatduc + phys + ahei3tert +
#'                             nevfcur + alcohfreqwk + global_stress2,
#'                             data = stroke_reduced, weights = weights), # model 7 apob_apoa
#'                          lm(formula = whr ~ subeduc + regionnn7 * ns(eage, df = 5) +
#'                             esex*ns(eage, df = 5) + moteduc + fatduc + phys + ahei3tert +
#'                             nevfcur + alcohfreqwk + global_stress2, data = stroke_reduced,
#'                             weights = weights), # model 8 whr
#'                          glm(formula = cardiacrfcat ~ subeduc + regionnn7 * ns(eage, df = 5) +
#'                              esex * ns(eage, df = 5) + moteduc + fatduc + phys + ahei3tert +
#'                              nevfcur + alcohfreqwk + global_stress2 +
#'                              ns(apob_apoa, knots = quantile(apob_apoa,c(0.25, 0.5, 0.75)),
#'                              Boundary.knots = quantile(apob_apoa,c(0.001, 0.95))) +
#'                              ns(whr, df = 5) + subhtn,family = "binomial",
#'                              data = stroke_reduced, weights = weights), # model 9 cardiacrfcat
#'                          glm(formula = dmhba1c2 ~ subeduc + regionnn7 * ns(eage, df = 5) +
#'                              esex * ns(eage, df = 5) + moteduc + fatduc + phys + ahei3tert +
#'                              nevfcur + alcohfreqwk + global_stress2 +
#'                              ns(apob_apoa, knots = quantile(apob_apoa,c(0.25, 0.5, 0.75)),
#'                              Boundary.knots = quantile(apob_apoa,c(0.001, 0.95))) +
#'                              ns(whr, df = 5) + subhtn, family = "binomial",
#'                              data = stroke_reduced, weights = weights), # model 10 dmhba1c2
#'                          glm(formula = case ~ subeduc + regionnn7 * ns(eage, df = 5) +
#'                              esex * ns(eage, df = 5) + moteduc + fatduc + phys + ahei3tert +
#'                              nevfcur + alcohfreqwk + global_stress2 +
#'                              ns(apob_apoa, knots = quantile(apob_apoa, c(0.25, 0.5, 0.75)),
#'                              Boundary.knots = quantile(apob_apoa,c(0.001, 0.95))) +
#'                              ns(whr, df = 5) + subhtn +
#'                              cardiacrfcat + dmhba1c2, family = "binomial", data = stroke_reduced,
#'                              weights = weights) # model 11 case
#'                        )
#'
#'
#'          causalPAFplot(dataframe = stroke_reduced,
#'                        exposure="phys",
#'                        mediator=c("subhtn","apob_apoa","whr"),
#'                        response="case",
#'                        response_model_mediators = response_vs_mediator,
#'                        response_model_exposure = response_vs_phys,
#'                        in_outArg = in_out,
#'                        Splines_outlist = Splines_outlist,
#'                        splinesDefinedIn_in_outDAG = TRUE,
#'                        model_listArg = model_listArgFit,
#'                        weights = w,
#'                        NumBootstrap = 2,
#'                        NumSimulation = 2,
#'                        plot = "bar",
#'                        fill= "skyblue",
#'                        colour ="orange" )
#'
#'
#'
#' \dontrun{
#' # For greater accuracy a larger numbr of bootstrap (e.g. 200) and larger number of simulations
#' # (e.g. 1000) should be run. However, this will increase the run time greatly.
#'          causalPAFplot(dataframe = stroke_reduced,
#'                        exposure="phys",
#'                        mediator=c("subhtn","apob_apoa","whr"),
#'                        response="case",
#'                        response_model_mediators = response_vs_mediator,
#'                        response_model_exposure = response_vs_phys,
#'                        in_outArg = in_out,
#'                        Splines_outlist = Splines_outlist,
#'                        splinesDefinedIn_in_outDAG = TRUE,
#'                        model_listArg = model_listArgFit,
#'                        weights = w,
#'                        NumBootstrap = 200,
#'                        NumSimulation = 1000,
#'                        plot = "bar",
#'                        fill= "skyblue",
#'                        colour ="orange" )
#' }
#'
#'
#'