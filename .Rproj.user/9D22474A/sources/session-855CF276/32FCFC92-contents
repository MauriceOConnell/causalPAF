################
### ERROR TO FIX
################
w <- rep(1,nrow(stroke_reduced))
w[stroke_reduced$case==0] <- 0.9965
w[stroke_reduced$case==1] <- 0.0035

stroke_reduced$weights <- w
################
################


NumSimulation = 200

for(i in 1:NumSimulation){
  results_subhtn_simulationStore[i,1:3] <- indirect_PAF_Sjolander_onesimulation(data_frame = stroke_reduced, exposure = "phys", mediator="subhtn", response = "case",mediator_model=list(model_list[[6]],model_list[[7]],model_list[[8]]), response_model=response_vs_mediator,response_model_2=response_vs_phys,weights=w)
  results_subhtn_simulationStore[i,4] <- path_specific_onesimulation(data_frame = stroke_reduced, exposure = "phys", mediator="subhtn", response = "case",mediator_model=list(model_list[[6]],model_list[[7]],model_list[[8]]), response_model=response_vs_mediator,response_model_2=response_vs_phys,weights=w)
  results_subhtn_simulationStore[i,5] <- overall_direct(data_frame = stroke_reduced, exposure = "phys", mediator="subhtn", response = "case",mediator_model=list(model_list[[6]],model_list[[7]],model_list[[8]]), response_model=response_vs_mediator,response_model_2=response_vs_phys,weights=w)
  flush.console()
  print(i)
}
results_subhtn[1,] = apply(results_subhtn_simulationStore,2,mean)





# Correct
glm("case ~ regionnn7*ns(eage,df=5)+esex*ns(eage,df=5) +  subeduc+ moteduc+ fatduc+ phys+ ahei3tert+ nevfcur+ alcohfreqwk+ global_stress2",data=stroke_reduced,family='binomial',w=w)

# Incorrect
glm(formula = case ~ phys + ahei3tert + alcohfreqwk + fatduc + global_stress2 + moteduc + nevfcur + subeduc + regionnn7 * ns(eage, df = 5) + esex * ns(eage, df = 5), family = "binomial", data = dataframe, weights = weights)


set weigths to w in stroke_reduced$weights





pointEstimate <- function(dataframe,
                          exposure="phys",
                          mediator=c("subhtn","apob_apoa","whr"),
                          response="case",
                          # response_model_mediators=response_vs_mediator,
                          # response_model_exposure=response_vs_phys,
                          response_model_mediators = list(),
                          response_model_exposure = list(),
                          in_outArg,
                          Splines_outlist,
                          splinesDefinedIn_in_outDAG,
                          model_listArg,
                          # weights = stroke_reduced$weights,
                          # weights = strokedata$weights,
                          weights = 1,  ## At moment, weigths are populated in the dataframe before calling function causalPAFplot.r. The default is weights = 1 which is not a case-control data format but rather a cohort weighting by default.
                          # prevalence ADD IN
                          # CHECK IS WEIGHT HARD CODED
                          NumSimulation,
                          addCustom = FALSE,
                          custom = ""
                          ){
  
  
  pointEstimate( dataframe = stroke_reduced,
                          exposure="phys",
                          mediator=c("subhtn","apob_apoa","whr"),
                          response="case",
                          response_model_mediators = list(),
                          response_model_exposure = list(),
                          in_outArg = in_out,
                          Splines_outlist = Splines_outlist,
                          splinesDefinedIn_in_outDAG = TRUE,
                          model_listArg = list(),
                          weights = w,
                          NumSimulation = 200,
                          addCustom = TRUE,
                          custom = "regionnn7*ns(eage,df=5)+esex*ns(eage,df=5)" )
                          

  
                          dataframe = stroke_reduced
                          exposure="phys"
                          mediator=c("subhtn","apob_apoa","whr")
                          response="case"
                          response_model_mediators = list()
                          response_model_exposure = list()
                          in_outArg = in_out
                          Splines_outlist = Splines_outlist  # needs to be input as list() if no splines. Assumes if appears as spline once needs to appear as a spline in all occurences
                          splinesDefinedIn_in_outDAG = TRUE
                          model_listArg = list()
                          weights = w
                          NumSimulation = 200
                          addCustom = TRUE
                          custom = "regionnn7*ns(eage,df=5)+esex*ns(eage,df=5)" # need to update make_formula() so that it runs without needing ~ first
                          

